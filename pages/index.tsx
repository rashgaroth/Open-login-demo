import { LoadingButton } from '@mui/lab'
import { Avatar, Box, Typography } from '@mui/material'
import { Stack } from '@mui/system'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import { Web3Auth } from '@web3auth/web3auth'
import { CHAIN_NAMESPACES, SafeEventEmitterProvider } from "@web3auth/base"
import { OpenloginUserInfo } from '@toruslabs/openlogin'
import RPC from '../lib/ethers'

const Button = (props: { children: React.ReactNode; onClick: () => void; loading: boolean; cancelable?: boolean | false }) => (
  <LoadingButton {...props} variant='contained' sx={{ bgcolor: props.cancelable ? 'red' : 'blue', color: 'white' }}>
    {props.children}
  </LoadingButton>
)

const chainId = '0x13881'
const clientId = 'BBTErVqSUMTzj8USH4IGszWX-YLoiRJUDG268zIItWTKAZozWEdT0cYtiIW7IXQbkj9dDHiHxLqigejg-6BQVRw'
const Home: NextPage = () => {
  const [isLoading, setIsLoading] = useState(false)
  const [web3auth, setWeb3auth] = useState<Web3Auth | null>(null)
  const [provider, setProvider] = useState<SafeEventEmitterProvider | null>(null)

  const [loadingState, setLoadingState] = useState({
    userInfo: false,
    walletInfo: false
  })
  const [userState, setUserState] = useState<{
    userInfo: Partial<OpenloginUserInfo | null>;
    walletInfo: {
      balance: string;
      account: string;
    } | null
  }>({
    userInfo: null,
    walletInfo: null
  })

  const setLoading = (id: string, value: boolean) => {
    setLoadingState((curr) => ({
      ...curr,
      [id]: value
    }))
  }

  const login = async () => {
    try {
      // setIsLoading(true)
      if (!web3auth) {
        console.log("web3auth not initialized yet")
        setIsLoading(false)
        return
      }
      const web3authProvider = await web3auth.connect()
  
      setProvider(web3authProvider)
      // setIsLoading(false)
    } catch (error) {
      console.error(error, '@errorLogin?')
      // setIsLoading(false)
    }
  };

  const getUserWalletInfo = async () => {
    setLoading('walletInfo', true)
    if (provider !== null) {
      const rpc = new RPC(provider)
      const balance = await rpc.getBalance()
      console.log(balance, '@balance?')
      const account = await rpc.getAccounts()
      console.log(account, '@account?')
      setUserState((curr) => ({
        ...curr,
        walletInfo: {
          account,
          balance
        }
      }))
    }
    setLoading('walletInfo', false)
  }

  const init = async () => {
    try {
      setIsLoading(true)
      const web3auth = new Web3Auth({
        clientId,
        chainConfig: {
          chainNamespace: CHAIN_NAMESPACES.EIP155,
          chainId,
          rpcTarget: "https://polygon-mumbai.infura.io/v3/2abf317ac68f47b1890e187c552dcdc1", // This is the public RPC we have added, please pass on your own endpoint while creating an app
        },
      })

      setWeb3auth(web3auth)

      await web3auth.initModal()
      if (web3auth.provider) {
        setProvider(web3auth.provider)
      }
      setIsLoading(false)
    } catch (error) {
      setIsLoading(false)
      console.error(error)
    }
  }

  const getUserInfo = async () => {
    try {
      setLoading('userInfo', true)
      if (web3auth !== null) {
        const userInfo = await web3auth?.getUserInfo()
        console.log(userInfo, '@userInfo?')
        setUserState((curr) => ({
          ...curr,
          userInfo: userInfo
        }))
        setLoading('userInfo', false)
      }
      setLoading('userInfo', false)
    } catch (error) {
      setLoading('userInfo', false)
      console.error(error, '@errorUserInfo')
    }
  }

  const logout = async () => {
    await web3auth?.logout({
      cleanup: true
    })
    setProvider(null)
  }

  useEffect(() => {
    init();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Open Login Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to Openlogin demo!
        </h1>
        {
          provider ? (
            <Stack direction={'column'} spacing={2} mt={5} alignItems='center' justifyContent={'center'}>
              <Typography>You&apos;re logged in</Typography>
              <Stack direction={'row'} spacing={2} alignItems='center' justifyContent={'center'}>
                <Button loading={loadingState.userInfo} onClick={getUserInfo}>
                  Get User 
                </Button>
                <Button loading={loadingState.walletInfo} onClick={getUserWalletInfo}>
                  Get User wallet
                </Button>
                <Button loading={loadingState.walletInfo} onClick={logout} cancelable>
                  Logout
                </Button>
              </Stack>
              <Box sx={{ width: 500, height: 500, bgcolor: 'whitesmoke', borderRadius: 4, p: 4, overflowY: 'scroll' }}>
                {
                  Object.values(userState).map((x, i) => (
                    x !== null ? (
                      typeof x === 'object' ? (
                        <Stack direction='column' spacing={2}>
                          {
                            Object.keys(x).map((y, j) => (
                              <div key={j}>
                                <Typography fontWeight={'bold'}>
                                  {y}
                                </Typography>
                                <Typography 
                                  sx={{ 
                                    color: (Object.values(x)[j] === '' || Object.values(x)[j] === null) ?
                                      'red' : Object.values(x)[j].includes('http') ? 
                                        'blue' : 'black' 
                                  }} 
                                  component={Object.values(x)[j].includes('http') ? 'a' : 'p'}
                                  href={Object.values(x)[j].includes('http') ? Object.values(x)[j] : undefined}
                                  target={Object.values(x)[j].includes('http') ? '_blank' : undefined}
                                >
                                  {
                                    Object.values(x)[j] === '' || Object.values(x)[j] === null  ? 
                                      'Value is not provided' : 
                                        Object.values(x)[j].length > 50 ? 
                                          `${Object.values(x)[j].substring(0,50)} (more string)` : 
                                            Object.values(x)[j]
                                  }
                                </Typography>
                              </div>
                            ))
                          }
                      </Stack>
                      ) : (
                      <Stack direction='row' spacing={2}>
                        <Typography>
                          {Object.keys(userState)[i]}
                        </Typography>
                        <Typography>
                          {x}
                        </Typography>
                      </Stack>
                      )
                    ) : (
                      null
                    )
                  ))
                }
              </Box>
            </Stack>
          ) : (
          <Stack direction={'row'} spacing={4} mt={5}>
            <LoadingButton 
              variant='contained'
              loading={isLoading}
              onClick={login}
            >
              Login
            </LoadingButton>
          </Stack>
          )
        }
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            Dwiyan
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
